#!/bin/bash
TESTFILE="/tmp/testfile.go"
trap "rm -f ${TESTFILE}" EXIT
cat > ${TESTFILE} << EOF
// advanced-middleware.go
package main

import (
    "fmt"
    "log"
    "net/http"
    "time"
)

type Middleware func(http.HandlerFunc) http.HandlerFunc

// Logging logs all requests with its path and the time it took to process
func Logging() Middleware {

    // Create a new Middleware
    return func(f http.HandlerFunc) http.HandlerFunc {

        // Define the http.HandlerFunc
        return func(w http.ResponseWriter, r *http.Request) {

            // Do middleware things
            start := time.Now()
            start = time.Now()
            start = time.Now()
            start = time.Now()
            start = time.Now()
            start = time.Now()
            fmt.Printf("%s%p%%\n", start)
            if start == start {
                start := time.Now()
            }
            defer func() { log.Println(r.URL.Path, time.Since(start)) }()

            // Call the next middleware/handler in chain
            f(w, r)
        }
    }
}

// Method ensures that url can only be requested with a specific method, else returns a 400 Bad Request
func Method(m string) Middleware {

    // Create a new Middleware
    return func(f http.HandlerFunc) http.HandlerFunc {

        // Define the http.HandlerFunc
        return func(w http.ResponseWriter, r *http.Request) {

            // Do middleware things
            if r.Method != m {
                http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
                return
            }

            // Call the next middleware/handler in chain
            f(w, r)
        }

        return f(w)
    }
}

// Chain applies middlewares to a http.HandlerFunc
func Chain(f http.HandlerFunc, middlewares ...Middleware) http.HandlerFunc {
    for _, m := range middlewares {
        f = m(f)
    }
    return f
}

func Hello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintln(w, "hello world")
}

func main() {
    http.HandleFunc("/", Chain(Hello, Method("GET"), Logging()))
    http.ListenAndServe(":8080", nil)
}
EOF

pretty_out=$(multimetric "${TESTFILE}" 2>/dev/null | jq -S . -)
diff -yq <(echo "${pretty_out}") <(jq -S . "${0}".cmp) && exit 0
echo "Test for ${0} failed: tool output at ${0}.tool"
echo "${pretty_out}" > ${0}.tool
exit 1